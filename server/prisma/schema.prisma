// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int         @id @default(autoincrement()) @map("_id")
  name        String
  title       String
  role        String
  email       String      @unique
  password    String
  isAdmin     Boolean     @default(false)
  isActive    Boolean     @default(true)
  tasks       Task[]      @relation("UserTasks")
  team        Task[]      @relation("TaskTeam")
  activities  Activity[]  @relation("UserActivities")
  notices     Notice[]    @relation("UserNotices") 
  readNotices Notice[]    @relation("UserReadsNotice") 
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("users")
}

model Task {
  id          Int         @id @default(autoincrement()) @map("_id")
  title       String
  date        DateTime    @default(now())
  priority    Priority    @default(NORMAL)
  stage       Stage       @default(TODO)
  description String
  userId      Int?
  user        User?       @relation("UserTasks", fields: [userId], references: [id])
  activities  Activity[]  
  subTasks    SubTask[]
  assets      String[]
  team        User[]      @relation("TaskTeam")
  isTrashed   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  notices     Notice[]    @relation("TaskNotices") 

  @@map("tasks")
}

model Activity {
  id        Int         @id @default(autoincrement()) @map("_id")
  type      ActivityType @default(ASSIGNED)
  activity  String
  date      DateTime    @default(now())
  by        User?       @relation("UserActivities", fields: [userId], references: [id])
  userId    Int?
  taskId    Int
  task      Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("activities")
}

model SubTask {
  id        Int       @id @default(autoincrement()) @map("_id")
  title     String
  date      DateTime
  tag       String?
  taskId    Int
  task      Task      @relation(fields: [taskId], references: [id])

  @@map("subtasks")
}

model Notice {
  id        Int        @id @default(autoincrement()) @map("_id")
  team      User[]     @relation("UserNotices")
  text      String
  task      Task?      @relation("TaskNotices", fields: [taskId], references: [id])
  taskId    Int?       
  notiType  NotiType   @default(ALERT)
  isRead    User[]     @relation("UserReadsNotice")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("notices")
}

enum Priority {
  HIGH
  MEDIUM
  NORMAL
  LOW
}

enum Stage {
  TODO
  IN_PROGRESS
  COMPLETED
}

enum ActivityType {
  ASSIGNED
  STARTED
  IN_PROGRESS
  BUG
  COMPLETED
  COMMENTED
}

enum NotiType {
  ALERT
  MESSAGE
}
